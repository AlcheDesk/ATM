<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.meowlomo.atm.core.mapper.DevInstructionResultMapper">
    <resultMap id="BaseResultMap" type="com.meowlomo.atm.core.model.InstructionResult">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="action" jdbcType="VARCHAR" property="action" />
        <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
        <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
        <result column="status_id" jdbcType="OTHER" property="status" typeHandler="com.meowlomo.atm.typehandler.StatusTypeHandler" />
        <result column="log" jdbcType="VARCHAR" property="log" />
        <result column="is_finished" jdbcType="BIT" property="finished" />
        <result column="instruction" jdbcType="OTHER" property="instruction" typeHandler="com.meowlomo.atm.typehandler.JsonNodeTypeHandler" />
        <result column="data" jdbcType="OTHER" property="data" typeHandler="com.meowlomo.atm.typehandler.JsonNodeTypeHandler" />
        <result column="run_id" jdbcType="BIGINT" property="runId" />
        <result column="run_type_id" jdbcType="OTHER" property="runType" typeHandler="com.meowlomo.atm.typehandler.RunTypeTypeHandler" />
        <result column="start_at" jdbcType="TIMESTAMP" property="startAt" />
        <result column="end_at" jdbcType="TIMESTAMP" property="endAt" />
        <result column="logical_order_index" jdbcType="VARCHAR" property="logicalOrderIndex" />
        <result column="input_data" jdbcType="VARCHAR" property="inputData" />
        <result column="input_type" jdbcType="VARCHAR" property="inputType" />
        <result column="input_parameter" jdbcType="OTHER" property="inputParameter" typeHandler="com.meowlomo.atm.typehandler.JsonNodeTypeHandler" />
        <result column="output_data" jdbcType="VARCHAR" property="outputData" />
        <result column="output_type" jdbcType="VARCHAR" property="outputType" />
        <result column="output_parameter" jdbcType="OTHER" property="outputParameter" typeHandler="com.meowlomo.atm.typehandler.JsonNodeTypeHandler" />
        <result column="expected_value" jdbcType="VARCHAR" property="expectedValue" />
        <result column="return_value" jdbcType="VARCHAR" property="returnValue" />
        <result column="is_overwrite" jdbcType="BIT" property="isOverwrite" />
        <result column="target" jdbcType="VARCHAR" property="target" />
        <result column="instruction_options" jdbcType="ARRAY" property="instructionOptions" typeHandler="com.meowlomo.atm.typehandler.StringSetTypeHandler" />
        <result column="instruction_option_log" jdbcType="VARCHAR" property="instructionOptionLog" />
        <result column="result_overwritten" jdbcType="INTEGER" property="resultOverwritten" />
        <result column="instruction_id" jdbcType="BIGINT" property="instructionId" />
        <result column="comment" jdbcType="VARCHAR" property="comment" />
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                        <foreach collection="criteria.statusCriteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.StatusTypeHandler}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.StatusTypeHandler} and #{criterion.secondValue,typeHandler=com.meowlomo.atm.typehandler.StatusTypeHandler}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem,typeHandler=com.meowlomo.atm.typehandler.StatusTypeHandler}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                        <foreach collection="criteria.instructionCriteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler} and #{criterion.secondValue,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                        <foreach collection="criteria.dataCriteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler} and #{criterion.secondValue,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                        <foreach collection="criteria.runTypeCriteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.RunTypeTypeHandler}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.RunTypeTypeHandler} and #{criterion.secondValue,typeHandler=com.meowlomo.atm.typehandler.RunTypeTypeHandler}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem,typeHandler=com.meowlomo.atm.typehandler.RunTypeTypeHandler}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                        <foreach collection="criteria.inputParameterCriteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler} and #{criterion.secondValue,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                        <foreach collection="criteria.outputParameterCriteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler} and #{criterion.secondValue,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                        <foreach collection="criteria.statusCriteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.StatusTypeHandler}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.StatusTypeHandler} and #{criterion.secondValue,typeHandler=com.meowlomo.atm.typehandler.StatusTypeHandler}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem,typeHandler=com.meowlomo.atm.typehandler.StatusTypeHandler}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                        <foreach collection="criteria.instructionCriteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler} and #{criterion.secondValue,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                        <foreach collection="criteria.dataCriteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler} and #{criterion.secondValue,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                        <foreach collection="criteria.runTypeCriteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.RunTypeTypeHandler}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.RunTypeTypeHandler} and #{criterion.secondValue,typeHandler=com.meowlomo.atm.typehandler.RunTypeTypeHandler}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem,typeHandler=com.meowlomo.atm.typehandler.RunTypeTypeHandler}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                        <foreach collection="criteria.inputParameterCriteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler} and #{criterion.secondValue,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                        <foreach collection="criteria.outputParameterCriteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler} and #{criterion.secondValue,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, action, created_at, updated_at, status_id, log, is_finished, instruction, data,
        run_id, run_type_id, start_at, end_at, logical_order_index, input_data, input_type,
        input_parameter, output_data, output_type, output_parameter, expected_value, return_value,
        is_overwrite, target, instruction_options, instruction_option_log, result_overwritten,
        instruction_id, comment
    </sql>
    <select id="selectByExample" parameterType="com.meowlomo.atm.core.model.InstructionResultExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List" />
        from dev_instruction_result
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExampleSelective" parameterType="map" resultMap="BaseResultMap">
        select
        <if test="example != null and example.distinct">
            distinct
        </if>
        <choose>
            <when test="selective != null and selective.length &gt; 0">
                <foreach collection="selective" item="column" separator=",">
                    ${column.aliasedEscapedColumnName}
                </foreach>
            </when>
            <otherwise>
                <include refid="Base_Column_List" />
            </otherwise>
        </choose>
        from dev_instruction_result
        <if test="example != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
        <if test="example != null and example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from dev_instruction_result
        where id = #{id,jdbcType=BIGINT}
    </select>
    <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="BaseResultMap">
        select
        <choose>
            <when test="selective != null and selective.length &gt; 0">
                <foreach collection="selective" item="column" separator=",">
                    ${column.aliasedEscapedColumnName}
                </foreach>
            </when>
            <otherwise>
                <include refid="Base_Column_List" />
            </otherwise>
        </choose>
        from dev_instruction_result
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from dev_instruction_result
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByExample" parameterType="com.meowlomo.atm.core.model.InstructionResultExample">
        delete from dev_instruction_result
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.meowlomo.atm.core.model.InstructionResult" useGeneratedKeys="true">
        insert into dev_instruction_result (action, status_id,
        log, is_finished, instruction,
        data,
        run_id, run_type_id,
        logical_order_index, input_data, input_type,
        input_parameter,
        output_data, output_type, output_parameter,
        expected_value, return_value, is_overwrite,
        instruction_options,
        instruction_option_log, result_overwritten,
        instruction_id, comment)
        values (#{action,jdbcType=VARCHAR}, #{status,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.StatusTypeHandler},
        #{log,jdbcType=VARCHAR}, #{finished,jdbcType=BIT}, #{instruction,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
        #{data,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
        #{runId,jdbcType=BIGINT}, #{runType,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.RunTypeTypeHandler},
        #{logicalOrderIndex,jdbcType=VARCHAR}, #{inputData,jdbcType=VARCHAR}, #{inputType,jdbcType=VARCHAR},
        #{inputParameter,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
        #{outputData,jdbcType=VARCHAR}, #{outputType,jdbcType=VARCHAR}, #{outputParameter,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
        #{expectedValue,jdbcType=VARCHAR}, #{returnValue,jdbcType=VARCHAR}, #{isOverwrite,jdbcType=BIT},
        #{instructionOptions,jdbcType=ARRAY,typeHandler=com.meowlomo.atm.typehandler.StringSetTypeHandler},
        #{instructionOptionLog,jdbcType=VARCHAR}, #{resultOverwritten,jdbcType=INTEGER},
        #{instructionId,jdbcType=BIGINT}, #{comment,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="record.id" parameterType="map" useGeneratedKeys="true">
        insert into dev_instruction_result
        <choose>
            <when test="selective != null and selective.length &gt; 0">
                <foreach close=")" collection="selective" item="column" open="(" separator=",">
                    ${column.escapedColumnName}
                </foreach>
            </when>
            <otherwise>
                <trim prefix="(" suffix=")" suffixOverrides=",">
                    <if test="record.action != null">
                        action,
                    </if>
                    <if test="record.status != null">
                        status_id,
                    </if>
                    <if test="record.log != null">
                        log,
                    </if>
                    <if test="record.finished != null">
                        is_finished,
                    </if>
                    <if test="record.instruction != null">
                        instruction,
                    </if>
                    <if test="record.data != null">
                        data,
                    </if>
                    <if test="record.runId != null">
                        run_id,
                    </if>
                    <if test="record.runType != null">
                        run_type_id,
                    </if>
                    <if test="record.logicalOrderIndex != null">
                        logical_order_index,
                    </if>
                    <if test="record.inputData != null">
                        input_data,
                    </if>
                    <if test="record.inputType != null">
                        input_type,
                    </if>
                    <if test="record.inputParameter != null">
                        input_parameter,
                    </if>
                    <if test="record.outputData != null">
                        output_data,
                    </if>
                    <if test="record.outputType != null">
                        output_type,
                    </if>
                    <if test="record.outputParameter != null">
                        output_parameter,
                    </if>
                    <if test="record.expectedValue != null">
                        expected_value,
                    </if>
                    <if test="record.returnValue != null">
                        return_value,
                    </if>
                    <if test="record.isOverwrite != null">
                        is_overwrite,
                    </if>
                    <if test="record.instructionOptions != null">
                        instruction_options,
                    </if>
                    <if test="record.instructionOptionLog != null">
                        instruction_option_log,
                    </if>
                    <if test="record.resultOverwritten != null">
                        result_overwritten,
                    </if>
                    <if test="record.instructionId != null">
                        instruction_id,
                    </if>
                    <if test="record.comment != null">
                        comment,
                    </if>
                </trim>
                <trim prefix="(" suffix=")" suffixOverrides="," />
            </otherwise>
        </choose>
        values
        <choose>
            <when test="selective != null and selective.length &gt; 0">
                <foreach close=")" collection="selective" item="column" open="(" separator=",">
                    #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
                </foreach>
            </when>
            <otherwise>
                <trim prefix="(" suffix=")" suffixOverrides=",">
                    <if test="record.action != null">
                        #{record.action,jdbcType=VARCHAR},
                    </if>
                    <if test="record.status != null">
                        #{record.status,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.StatusTypeHandler},
                    </if>
                    <if test="record.log != null">
                        #{record.log,jdbcType=VARCHAR},
                    </if>
                    <if test="record.finished != null">
                        #{record.finished,jdbcType=BIT},
                    </if>
                    <if test="record.instruction != null">
                        #{record.instruction,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
                    </if>
                    <if test="record.data != null">
                        #{record.data,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
                    </if>
                    <if test="record.runId != null">
                        #{record.runId,jdbcType=BIGINT},
                    </if>
                    <if test="record.runType != null">
                        #{record.runType,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.RunTypeTypeHandler},
                    </if>
                    <if test="record.logicalOrderIndex != null">
                        #{record.logicalOrderIndex,jdbcType=VARCHAR},
                    </if>
                    <if test="record.inputData != null">
                        #{record.inputData,jdbcType=VARCHAR},
                    </if>
                    <if test="record.inputType != null">
                        #{record.inputType,jdbcType=VARCHAR},
                    </if>
                    <if test="record.inputParameter != null">
                        #{record.inputParameter,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
                    </if>
                    <if test="record.outputData != null">
                        #{record.outputData,jdbcType=VARCHAR},
                    </if>
                    <if test="record.outputType != null">
                        #{record.outputType,jdbcType=VARCHAR},
                    </if>
                    <if test="record.outputParameter != null">
                        #{record.outputParameter,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
                    </if>
                    <if test="record.expectedValue != null">
                        #{record.expectedValue,jdbcType=VARCHAR},
                    </if>
                    <if test="record.returnValue != null">
                        #{record.returnValue,jdbcType=VARCHAR},
                    </if>
                    <if test="record.isOverwrite != null">
                        #{record.isOverwrite,jdbcType=BIT},
                    </if>
                    <if test="record.instructionOptions != null">
                        #{record.instructionOptions,jdbcType=ARRAY,typeHandler=com.meowlomo.atm.typehandler.StringSetTypeHandler},
                    </if>
                    <if test="record.instructionOptionLog != null">
                        #{record.instructionOptionLog,jdbcType=VARCHAR},
                    </if>
                    <if test="record.resultOverwritten != null">
                        #{record.resultOverwritten,jdbcType=INTEGER},
                    </if>
                    <if test="record.instructionId != null">
                        #{record.instructionId,jdbcType=BIGINT},
                    </if>
                    <if test="record.comment != null">
                        #{record.comment,jdbcType=VARCHAR},
                    </if>
                </trim>
            </otherwise>
        </choose>
    </insert>
    <select id="countByExample" parameterType="com.meowlomo.atm.core.model.InstructionResultExample" resultType="java.lang.Long">
        select count(*) from dev_instruction_result
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update dev_instruction_result
        SET
        <choose>
            <when test="selective != null and selective.length &gt; 0">
                <foreach collection="selective" item="column" separator=",">
                    <choose>
                        <when test="'status_id'.toString() == column.value">
                            ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.StatusTypeHandler}
                        </when>
                        <when test="'instruction'.toString() == column.value">
                            ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                        </when>
                        <when test="'data'.toString() == column.value">
                            ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                        </when>
                        <when test="'run_type_id'.toString() == column.value">
                            ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.RunTypeTypeHandler}
                        </when>
                        <when test="'input_parameter'.toString() == column.value">
                            ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                        </when>
                        <when test="'output_parameter'.toString() == column.value">
                            ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                        </when>
                        <when test="'instruction_options'.toString() == column.value">
                            ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=ARRAY,typeHandler=com.meowlomo.atm.typehandler.StringSetTypeHandler}
                        </when>
                        <otherwise>
                            ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
                        </otherwise>
                    </choose>
                </foreach>
            </when>
            <otherwise>
                <trim suffixOverrides=",">
                    <if test="record.id != null">
                        id = #{record.id,jdbcType=BIGINT},
                    </if>
                    <if test="record.action != null">
                        action = #{record.action,jdbcType=VARCHAR},
                    </if>
                    <if test="record.status != null">
                        status_id = #{record.status,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.StatusTypeHandler},
                    </if>
                    <if test="record.log != null">
                        log = #{record.log,jdbcType=VARCHAR},
                    </if>
                    <if test="record.finished != null">
                        is_finished = #{record.finished,jdbcType=BIT},
                    </if>
                    <if test="record.instruction != null">
                        instruction = #{record.instruction,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
                    </if>
                    <if test="record.data != null">
                        data = #{record.data,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
                    </if>
                    <if test="record.runId != null">
                        run_id = #{record.runId,jdbcType=BIGINT},
                    </if>
                    <if test="record.runType != null">
                        run_type_id = #{record.runType,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.RunTypeTypeHandler},
                    </if>
                    <if test="record.logicalOrderIndex != null">
                        logical_order_index = #{record.logicalOrderIndex,jdbcType=VARCHAR},
                    </if>
                    <if test="record.inputData != null">
                        input_data = #{record.inputData,jdbcType=VARCHAR},
                    </if>
                    <if test="record.inputType != null">
                        input_type = #{record.inputType,jdbcType=VARCHAR},
                    </if>
                    <if test="record.inputParameter != null">
                        input_parameter = #{record.inputParameter,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
                    </if>
                    <if test="record.outputData != null">
                        output_data = #{record.outputData,jdbcType=VARCHAR},
                    </if>
                    <if test="record.outputType != null">
                        output_type = #{record.outputType,jdbcType=VARCHAR},
                    </if>
                    <if test="record.outputParameter != null">
                        output_parameter = #{record.outputParameter,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
                    </if>
                    <if test="record.expectedValue != null">
                        expected_value = #{record.expectedValue,jdbcType=VARCHAR},
                    </if>
                    <if test="record.returnValue != null">
                        return_value = #{record.returnValue,jdbcType=VARCHAR},
                    </if>
                    <if test="record.isOverwrite != null">
                        is_overwrite = #{record.isOverwrite,jdbcType=BIT},
                    </if>
                    <if test="record.instructionOptions != null">
                        instruction_options = #{record.instructionOptions,jdbcType=ARRAY,typeHandler=com.meowlomo.atm.typehandler.StringSetTypeHandler},
                    </if>
                    <if test="record.instructionOptionLog != null">
                        instruction_option_log = #{record.instructionOptionLog,jdbcType=VARCHAR},
                    </if>
                    <if test="record.resultOverwritten != null">
                        result_overwritten = #{record.resultOverwritten,jdbcType=INTEGER},
                    </if>
                    <if test="record.instructionId != null">
                        instruction_id = #{record.instructionId,jdbcType=BIGINT},
                    </if>
                    <if test="record.comment != null">
                        comment = #{record.comment,jdbcType=VARCHAR},
                    </if>
                </trim>
            </otherwise>
        </choose>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update dev_instruction_result
        set id = #{record.id,jdbcType=BIGINT},
        action = #{record.action,jdbcType=VARCHAR},
        status_id = #{record.status,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.StatusTypeHandler},
        log = #{record.log,jdbcType=VARCHAR},
        is_finished = #{record.finished,jdbcType=BIT},
        instruction = #{record.instruction,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
        data = #{record.data,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
        run_id = #{record.runId,jdbcType=BIGINT},
        run_type_id = #{record.runType,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.RunTypeTypeHandler},
        logical_order_index = #{record.logicalOrderIndex,jdbcType=VARCHAR},
        input_data = #{record.inputData,jdbcType=VARCHAR},
        input_type = #{record.inputType,jdbcType=VARCHAR},
        input_parameter = #{record.inputParameter,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
        output_data = #{record.outputData,jdbcType=VARCHAR},
        output_type = #{record.outputType,jdbcType=VARCHAR},
        output_parameter = #{record.outputParameter,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
        expected_value = #{record.expectedValue,jdbcType=VARCHAR},
        return_value = #{record.returnValue,jdbcType=VARCHAR},
        is_overwrite = #{record.isOverwrite,jdbcType=BIT},
        instruction_options = #{record.instructionOptions,jdbcType=ARRAY,typeHandler=com.meowlomo.atm.typehandler.StringSetTypeHandler},
        instruction_option_log = #{record.instructionOptionLog,jdbcType=VARCHAR},
        result_overwritten = #{record.resultOverwritten,jdbcType=INTEGER},
        instruction_id = #{record.instructionId,jdbcType=BIGINT},
        comment = #{record.comment,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="map">
        update dev_instruction_result
        SET
        <choose>
            <when test="selective != null and selective.length &gt; 0">
                <foreach collection="selective" item="column" separator=",">
                    <choose>
                        <when test="'status_id'.toString() == column.value">
                            ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.StatusTypeHandler}
                        </when>
                        <when test="'instruction'.toString() == column.value">
                            ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                        </when>
                        <when test="'data'.toString() == column.value">
                            ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                        </when>
                        <when test="'run_type_id'.toString() == column.value">
                            ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.RunTypeTypeHandler}
                        </when>
                        <when test="'input_parameter'.toString() == column.value">
                            ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                        </when>
                        <when test="'output_parameter'.toString() == column.value">
                            ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler}
                        </when>
                        <when test="'instruction_options'.toString() == column.value">
                            ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=ARRAY,typeHandler=com.meowlomo.atm.typehandler.StringSetTypeHandler}
                        </when>
                        <otherwise>
                            ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
                        </otherwise>
                    </choose>
                </foreach>
            </when>
            <otherwise>
                <trim suffixOverrides=",">
                    <if test="record.action != null">
                        action = #{record.action,jdbcType=VARCHAR},
                    </if>
                    <if test="record.status != null">
                        status_id = #{record.status,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.StatusTypeHandler},
                    </if>
                    <if test="record.log != null">
                        log = #{record.log,jdbcType=VARCHAR},
                    </if>
                    <if test="record.finished != null">
                        is_finished = #{record.finished,jdbcType=BIT},
                    </if>
                    <if test="record.instruction != null">
                        instruction = #{record.instruction,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
                    </if>
                    <if test="record.data != null">
                        data = #{record.data,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
                    </if>
                    <if test="record.runId != null">
                        run_id = #{record.runId,jdbcType=BIGINT},
                    </if>
                    <if test="record.runType != null">
                        run_type_id = #{record.runType,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.RunTypeTypeHandler},
                    </if>
                    <if test="record.logicalOrderIndex != null">
                        logical_order_index = #{record.logicalOrderIndex,jdbcType=VARCHAR},
                    </if>
                    <if test="record.inputData != null">
                        input_data = #{record.inputData,jdbcType=VARCHAR},
                    </if>
                    <if test="record.inputType != null">
                        input_type = #{record.inputType,jdbcType=VARCHAR},
                    </if>
                    <if test="record.inputParameter != null">
                        input_parameter = #{record.inputParameter,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
                    </if>
                    <if test="record.outputData != null">
                        output_data = #{record.outputData,jdbcType=VARCHAR},
                    </if>
                    <if test="record.outputType != null">
                        output_type = #{record.outputType,jdbcType=VARCHAR},
                    </if>
                    <if test="record.outputParameter != null">
                        output_parameter = #{record.outputParameter,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
                    </if>
                    <if test="record.expectedValue != null">
                        expected_value = #{record.expectedValue,jdbcType=VARCHAR},
                    </if>
                    <if test="record.returnValue != null">
                        return_value = #{record.returnValue,jdbcType=VARCHAR},
                    </if>
                    <if test="record.isOverwrite != null">
                        is_overwrite = #{record.isOverwrite,jdbcType=BIT},
                    </if>
                    <if test="record.instructionOptions != null">
                        instruction_options = #{record.instructionOptions,jdbcType=ARRAY,typeHandler=com.meowlomo.atm.typehandler.StringSetTypeHandler},
                    </if>
                    <if test="record.instructionOptionLog != null">
                        instruction_option_log = #{record.instructionOptionLog,jdbcType=VARCHAR},
                    </if>
                    <if test="record.resultOverwritten != null">
                        result_overwritten = #{record.resultOverwritten,jdbcType=INTEGER},
                    </if>
                    <if test="record.instructionId != null">
                        instruction_id = #{record.instructionId,jdbcType=BIGINT},
                    </if>
                    <if test="record.comment != null">
                        comment = #{record.comment,jdbcType=VARCHAR},
                    </if>
                </trim>
            </otherwise>
        </choose>
        where id = #{record.id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.meowlomo.atm.core.model.InstructionResult">
        update dev_instruction_result
        set action = #{action,jdbcType=VARCHAR},
        status_id = #{status,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.StatusTypeHandler},
        log = #{log,jdbcType=VARCHAR},
        is_finished = #{finished,jdbcType=BIT},
        instruction = #{instruction,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
        data = #{data,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
        run_id = #{runId,jdbcType=BIGINT},
        run_type_id = #{runType,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.RunTypeTypeHandler},
        logical_order_index = #{logicalOrderIndex,jdbcType=VARCHAR},
        input_data = #{inputData,jdbcType=VARCHAR},
        input_type = #{inputType,jdbcType=VARCHAR},
        input_parameter = #{inputParameter,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
        output_data = #{outputData,jdbcType=VARCHAR},
        output_type = #{outputType,jdbcType=VARCHAR},
        output_parameter = #{outputParameter,jdbcType=OTHER,typeHandler=com.meowlomo.atm.typehandler.JsonNodeTypeHandler},
        expected_value = #{expectedValue,jdbcType=VARCHAR},
        return_value = #{returnValue,jdbcType=VARCHAR},
        is_overwrite = #{isOverwrite,jdbcType=BIT},
        instruction_options = #{instructionOptions,jdbcType=ARRAY,typeHandler=com.meowlomo.atm.typehandler.StringSetTypeHandler},
        instruction_option_log = #{instructionOptionLog,jdbcType=VARCHAR},
        result_overwritten = #{resultOverwritten,jdbcType=INTEGER},
        instruction_id = #{instructionId,jdbcType=BIGINT},
        comment = #{comment,jdbcType=VARCHAR}
        where id = #{id,jdbcType=BIGINT}
    </update>
    <select id="selectByExampleWithRowbounds" parameterType="com.meowlomo.atm.core.model.InstructionResultExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List" />
        from dev_instruction_result
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectOneByExample" parameterType="com.meowlomo.atm.core.model.InstructionResultExample" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from dev_instruction_result
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        limit 1
    </select>
    <select id="selectOneByExampleSelective" parameterType="map" resultMap="BaseResultMap">
        select
        <choose>
            <when test="selective != null and selective.length &gt; 0">
                <foreach collection="selective" item="column" separator=",">
                    ${column.aliasedEscapedColumnName}
                </foreach>
            </when>
            <otherwise>
                <include refid="Base_Column_List" />
            </otherwise>
        </choose>
        from dev_instruction_result
        <if test="example != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
        <if test="example != null and example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
        limit 1
    </select>
</mapper>